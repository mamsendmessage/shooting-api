#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("api-server:server");
var http = require("http");
const DatabaseManager = require("../database/databaseManager");
const Constant = require("../models/Constant");
const ConfigurationService = require("../services/ConfigurationService");
const socket = require('socket.io');
const CommunicationService = require("../implementation/communicationService");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "2024");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

CommunicationService.InitializeSocketIO(server)

// const SocketIO = socket(server, {
//   cors: {
//     origin: '*',
//   }
// });

// SocketIO.on('connection', (socket) => {
//   console.log('A connection has been created with' + socket.id);
//   socket.on('Change', (changes) => {
//     SocketIO.sockets.emit('Change', changes);
//   });
//   socket.on('Create', (newData) => {
//     SocketIO.sockets.emit('Create', newData);
//   })
// })
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
async function onListening() {
  const tResult = await DatabaseManager.Initialize();
  if (tResult == 0) {
    await ConfigurationService.loadData();
  }
  var addr = server.address();
  console.log(
    `Server Running On Port ${port}  --> http://localhost:${addr.port}`
  );
}
